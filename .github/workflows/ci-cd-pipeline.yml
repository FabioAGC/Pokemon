name: CI/CD Pipeline - Pokemon Project

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MAVEN_OPTS: -Xmx1024m
  JAVA_VERSION: '11'

jobs:
  # Job 1: Testes Unitários e Mock
  test:
    name: 🧪 Executar Testes
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache das dependências Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔧 Instalar dependências e compilar
      run: |
        echo "🔧 Instalando dependências Maven..."
        mvn clean compile test-compile
        
    - name: 🧪 Executar testes unitários
      run: |
        echo "🧪 Executando testes unitários e de mock..."
        mvn test
        
    - name: 📊 Processar resultados dos testes
      id: test-results
      run: |
        echo "📊 Processando resultados dos testes..."
        
        # Contar testes executados
        if [ -f target/surefire-reports/TEST-*.xml ]; then
          TEST_COUNT=$(grep -o 'tests="[0-9]*"' target/surefire-reports/TEST-*.xml | grep -o '[0-9]*' | head -1)
          TEST_PASSED=$(grep -o 'failures="0" errors="0"' target/surefire-reports/TEST-*.xml | wc -l)
          TEST_FAILED=$((TEST_COUNT - TEST_PASSED))
        else
          TEST_COUNT=0
          TEST_PASSED=0
          TEST_FAILED=0
        fi
        
        echo "TEST_COUNT=$TEST_COUNT" >> $GITHUB_ENV
        echo "TEST_PASSED=$TEST_PASSED" >> $GITHUB_ENV
        echo "TEST_FAILED=$TEST_FAILED" >> $GITHUB_ENV
        
        # Outputs para outros jobs
        echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
        echo "test_passed=$TEST_PASSED" >> $GITHUB_OUTPUT
        echo "test_failed=$TEST_FAILED" >> $GITHUB_OUTPUT
        
        if [ $TEST_FAILED -eq 0 ]; then
          echo "TEST_STATUS=SUCCESS" >> $GITHUB_ENV
          echo "test_status=SUCCESS" >> $GITHUB_OUTPUT
          echo "✅ Todos os testes passaram!"
        else
          echo "TEST_STATUS=FAILURE" >> $GITHUB_ENV
          echo "test_status=FAILURE" >> $GITHUB_OUTPUT
          echo "❌ Alguns testes falharam!"
        fi
        
    - name: 📁 Upload relatório de testes
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: target/surefire-reports/
        retention-days: 30
        
    - name: 📋 Exibir resumo dos testes
      run: |
        echo "📋 Resumo dos Testes:"
        echo "• Total de testes: $TEST_COUNT"
        echo "• Testes passaram: $TEST_PASSED"
        echo "• Testes falharam: $TEST_FAILED"
        echo "• Status: $TEST_STATUS"

  # Job 2: Build e Empacotamento (roda em paralelo com os testes)
  build:
    name: 📦 Build e Empacotamento
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache das dependências Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔧 Compilar projeto
      run: |
        echo "🔧 Compilando projeto..."
        mvn clean compile
        
    - name: 📦 Criar pacote JAR
      run: |
        echo "📦 Criando pacote JAR..."
        mvn package -DskipTests
        
    - name: 📊 Verificar artefatos gerados
      run: |
        echo "📊 Verificando artefatos gerados..."
        ls -la target/
        
        if [ -f target/pokemon-do-dia-*.jar ]; then
          echo "BUILD_STATUS=SUCCESS" >> $GITHUB_ENV
          echo "✅ JAR criado com sucesso!"
          JAR_SIZE=$(du -h target/pokemon-do-dia-*.jar | cut -f1)
          echo "📦 Tamanho do JAR: $JAR_SIZE"
        else
          echo "BUILD_STATUS=FAILURE" >> $GITHUB_ENV
          echo "❌ Falha ao criar JAR!"
          exit 1
        fi
        
    - name: 📁 Upload JAR executável
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pokemon-jar
        path: target/pokemon-do-dia-*.jar
        retention-days: 30
        
    - name: 📁 Upload JAR com dependências
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pokemon-fat-jar
        path: target/pokemon-do-dia-*-shaded.jar
        retention-days: 30

  # Job 3: Notificação por Email
  notification:
    name: 📧 Enviar Notificação
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()  # Executa mesmo se outros jobs falharem
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📧 Instalar dependências Python
      run: |
        echo "📧 Instalando dependências Python..."
        # Python já tem smtplib e email built-in, não precisa instalar nada
        
    - name: 🔧 Tornar script executável
      run: |
        echo "🔧 Tornando script executável..."
        chmod +x scripts/send_notification.py
        
    - name: 📧 Enviar notificação por email
      env:
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        TEST_STATUS: ${{ needs.test.result }}
        BUILD_STATUS: ${{ needs.build.result }}
        TEST_COUNT: ${{ needs.test.outputs.test_count }}
        TEST_PASSED: ${{ needs.test.outputs.test_passed }}
        TEST_FAILED: ${{ needs.test.outputs.test_failed }}
        POM_VERSION: ${{ github.ref_name }}
      run: |
        echo "📧 Enviando notificação por email..."
        python3 scripts/send_notification.py
        
    - name: 📋 Exibir status final
      run: |
        echo "📋 Status Final do Pipeline:"
        echo "• Testes: ${{ needs.test.result }}"
        echo "• Build: ${{ needs.build.result }}"
        echo "• Notificação: ${{ job.status }}"
        
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
          echo "🎉 Pipeline concluído com sucesso!"
        else
          echo "❌ Pipeline falhou em alguma etapa!"
        fi

  # Job 4: Deploy (opcional - roda apenas em main)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success' && needs.build.result == 'success'
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 📥 Download artefatos
      uses: actions/download-artifact@v3
      with:
        name: pokemon-jar
        path: ./artifacts/
        
    - name: 🚀 Simular deploy
      run: |
        echo "🚀 Simulando deploy..."
        echo "📦 Artefatos prontos para deploy:"
        ls -la artifacts/
        echo "✅ Deploy simulado concluído!"
