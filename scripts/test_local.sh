#!/bin/bash

# Script para testar o sistema de CI/CD localmente
# Este script simula as etapas do pipeline GitHub Actions

set -e  # Para o script se algum comando falhar

echo "üöÄ Iniciando teste local do sistema de CI/CD..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pom.xml" ]; then
    print_error "pom.xml n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

print_status "üìÅ Diret√≥rio do projeto: $(pwd)"

# Etapa 1: Verificar depend√™ncias
print_status "üîç Verificando depend√™ncias..."

if ! command -v java &> /dev/null; then
    print_error "Java n√£o encontrado. Execute ./scripts/install_dependencies.sh primeiro."
    exit 1
fi

if ! command -v mvn &> /dev/null; then
    print_error "Maven n√£o encontrado. Execute ./scripts/install_dependencies.sh primeiro."
    exit 1
fi

if ! command -v python3 &> /dev/null; then
    print_error "Python3 n√£o encontrado. Execute ./scripts/install_dependencies.sh primeiro."
    exit 1
fi

print_success "‚úÖ Todas as depend√™ncias est√£o instaladas"

# Etapa 2: Compilar projeto
print_status "üîß Compilando projeto..."
if mvn clean compile; then
    print_success "‚úÖ Compila√ß√£o conclu√≠da com sucesso"
else
    print_error "‚ùå Falha na compila√ß√£o"
    exit 1
fi

# Etapa 3: Executar testes
print_status "üß™ Executando testes..."
if mvn test; then
    print_success "‚úÖ Todos os testes passaram"
    TEST_STATUS="SUCCESS"
else
    print_warning "‚ö†Ô∏è  Alguns testes falharam"
    TEST_STATUS="FAILURE"
fi

# Etapa 4: Fazer build
print_status "üì¶ Criando pacote JAR..."
if mvn package -DskipTests; then
    print_success "‚úÖ JAR criado com sucesso"
    BUILD_STATUS="SUCCESS"
else
    print_error "‚ùå Falha ao criar JAR"
    BUILD_STATUS="FAILURE"
    exit 1
fi

# Etapa 5: Verificar artefatos
print_status "üìä Verificando artefatos gerados..."

if [ -f "target/pokemon-do-dia-*.jar" ]; then
    print_success "‚úÖ JAR execut√°vel encontrado"
    JAR_SIZE=$(du -h target/pokemon-do-dia-*.jar | cut -f1)
    print_status "üì¶ Tamanho do JAR: $JAR_SIZE"
else
    print_warning "‚ö†Ô∏è  JAR execut√°vel n√£o encontrado"
fi

if [ -f "target/pokemon-do-dia-*-shaded.jar" ]; then
    print_success "‚úÖ JAR com depend√™ncias encontrado"
    FAT_JAR_SIZE=$(du -h target/pokemon-do-dia-*-shaded.jar | cut -f1)
    print_status "üì¶ Tamanho do JAR com depend√™ncias: $FAT_JAR_SIZE"
else
    print_warning "‚ö†Ô∏è  JAR com depend√™ncias n√£o encontrado"
fi

if [ -d "target/surefire-reports" ]; then
    print_success "‚úÖ Relat√≥rios de teste encontrados"
    REPORT_COUNT=$(find target/surefire-reports -name "*.xml" | wc -l)
    print_status "üìä N√∫mero de relat√≥rios: $REPORT_COUNT"
else
    print_warning "‚ö†Ô∏è  Relat√≥rios de teste n√£o encontrados"
fi

# Etapa 6: Testar script de notifica√ß√£o (opcional)
print_status "üìß Testando script de notifica√ß√£o..."

if [ -f "scripts/send_notification.py" ]; then
    print_success "‚úÖ Script de notifica√ß√£o encontrado"
    
    # Verificar se as vari√°veis de ambiente est√£o configuradas
    if [ -n "$NOTIFICATION_EMAIL" ] && [ -n "$SENDER_EMAIL" ] && [ -n "$SENDER_PASSWORD" ]; then
        print_status "üîß Vari√°veis de ambiente configuradas, testando envio de email..."
        
        # Configurar vari√°veis de ambiente para o teste
        export TEST_STATUS="$TEST_STATUS"
        export BUILD_STATUS="$BUILD_STATUS"
        export TEST_COUNT="32"
        export TEST_PASSED="32"
        export TEST_FAILED="0"
        export POM_VERSION="2.0.0"
        
        if python3 scripts/send_notification.py; then
            print_success "‚úÖ Email de notifica√ß√£o enviado com sucesso"
        else
            print_warning "‚ö†Ô∏è  Falha ao enviar email de notifica√ß√£o"
        fi
    else
        print_warning "‚ö†Ô∏è  Vari√°veis de ambiente n√£o configuradas para teste de email"
        print_status "üí° Configure NOTIFICATION_EMAIL, SENDER_EMAIL e SENDER_PASSWORD para testar"
    fi
else
    print_error "‚ùå Script de notifica√ß√£o n√£o encontrado"
fi

# Resumo final
echo ""
print_status "üìã Resumo do Teste Local:"
echo "‚Ä¢ Compila√ß√£o: ‚úÖ Sucesso"
echo "‚Ä¢ Testes: $([ "$TEST_STATUS" = "SUCCESS" ] && echo "‚úÖ Sucesso" || echo "‚ö†Ô∏è  Falha")"
echo "‚Ä¢ Build: $([ "$BUILD_STATUS" = "SUCCESS" ] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")"
echo "‚Ä¢ Artefatos: ‚úÖ Gerados"
echo "‚Ä¢ Notifica√ß√£o: $([ -n "$NOTIFICATION_EMAIL" ] && echo "‚úÖ Configurada" || echo "‚ö†Ô∏è  N√£o configurada")"

echo ""
if [ "$TEST_STATUS" = "SUCCESS" ] && [ "$BUILD_STATUS" = "SUCCESS" ]; then
    print_success "üéâ Teste local conclu√≠do com sucesso! O sistema est√° pronto para o pipeline."
else
    print_warning "‚ö†Ô∏è  Teste local conclu√≠do com alguns problemas. Verifique os logs acima."
fi

echo ""
print_status "üí° Pr√≥ximos passos:"
echo "1. Configure as secrets no GitHub Actions (veja config-example.txt)"
echo "2. Fa√ßa push do c√≥digo para o reposit√≥rio"
echo "3. O pipeline ser√° executado automaticamente"
echo "4. Monitore a execu√ß√£o na aba Actions do GitHub"


